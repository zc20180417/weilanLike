// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_h: { value: 0,editor: { range: [0,360,0.01]}}
        u_s: { value: 0,editor: { range: [-1,1,0.01]}}
        u_l: { value: 0,editor: { range: [-1,1,0.01]}}
        u_color: { value: [1,1,1,1], editor: { type: color}}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform FS_BLOCK{
    vec4 u_color;
    float u_brightness;
    float u_h;
    float u_s;
    float u_l;
  };

  void hsl2Rgb(in vec3 hsl,out vec3 rgb){
    float c = (1.0-abs(2.0*hsl.z-1.0))*hsl.y;
    float x = c*(1.0-abs(mod(hsl.x/60.0,2.0)-1.0));
    float m = hsl.z-c*0.5;
    float r=0.0;
    float g=0.0;
    float b=0.0;
    if(hsl.x<60.0){
      r=c;g=x;
    }else if(hsl.x<120.0){
      r=x;g=c;
    }else if(hsl.x<180.0){
      g=c;b=x;
    }else if(hsl.x<240.0){
      g=x;b=c;
    }else if(hsl.x<300.0){
      r=x;b=c;
    }else if(hsl.x<=360.0){
      r=c;b=x;
    }

    rgb.r=r+m;
    rgb.g=g+m;
    rgb.b=b+m;
  }

  void rgb2Hsl(in vec3 rgb,out vec3 hsl){
    float cMax=max(rgb.r,max(rgb.g,rgb.b));
    float cMin=min(rgb.r,min(rgb.g,rgb.b));
    float dC=cMax-cMin;

    hsl.z=(cMax+cMin)*0.5;

    if(dC==0.0){
      hsl.x=0.0;
    }else if(cMax==rgb.r){
      hsl.x=60.0*mod((rgb.g-rgb.b)/dC,6.0);
    }else if(cMax==rgb.g){
      hsl.x=60.0*((rgb.b-rgb.r)/dC+2.0);
    }else{
      hsl.x=60.0*((rgb.r-rgb.g)/dC+4.0);
    }

    if(dC==0.0){
      hsl.y=0.0;
    }else {
      hsl.y=dC/(1.0-abs(2.0*hsl.z-1.0));
    }
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    vec3 hsl=vec3(0,0,0);
    vec3 rgb=vec3(0,0,0);

    #if USE_GRAY
      //去色
      float gray = 0.2126*o.r + 0.7152*o.g + 0.0722*o.b;
      o.r=o.g=o.b=gray;
    #endif
    if (u_h != 0.0 || u_s != 0.0 || u_l != 0.0) {
      rgb2Hsl(o.rgb,hsl);
      hsl.x=mod(u_h+hsl.x+360.0,360.0);
      hsl.y=clamp(u_s+hsl.y,0.0,1.0);
      hsl.z=clamp(u_l+hsl.z,0.0,1.0);
      hsl2Rgb(hsl,rgb);
      o.rgb=rgb;
    }

    o*=v_color;
    o.rgb*=u_color.rgb;

    //叠加一个高光
	  o.rgb+=vec3(u_brightness);

    ALPHA_TEST(o);
    gl_FragColor = o;
  }
}%
