{
  "ver": "1.0.27",
  "uuid": "efec8fda-16d6-4183-b628-5b2e27f51a14",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvarying vec4 v_worldPos;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  v_worldPos=cc_matWorld*pos;\n  pos = cc_matViewProj * v_worldPos;\n  #else\n  v_worldPos=pos;\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 u_maskColor;\nuniform float u_progressY;\nvarying vec4 v_worldPos;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float smoothWidth=5.0;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  float smoothA=1.0-smoothstep(u_progressY,u_progressY+smoothWidth,v_worldPos.y);\n  if(v_worldPos.y<=u_progressY){\n    o.a*=smoothA;\n  }else{\n    o.rgb=mix(u_maskColor.rgb,o.rgb,smoothA);\n  }\n  #if PREMULTI_ALPHA\n    o.rgb*=o.a;\n  #endif\n  gl_FragColor =o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nout vec4 v_worldPos;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  v_worldPos=cc_matWorld*pos;\n  pos = cc_matViewProj * v_worldPos;\n  #else\n  v_worldPos=pos;\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform attr{\n  vec4 u_maskColor;\n  float u_progressY;\n};\nin vec4 v_worldPos;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float smoothWidth=5.0;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  float smoothA=1.0-smoothstep(u_progressY,u_progressY+smoothWidth,v_worldPos.y);\n  if(v_worldPos.y<=u_progressY){\n    o.a*=smoothA;\n  }else{\n    o.rgb=mix(u_maskColor.rgb,o.rgb,smoothA);\n  }\n  #if PREMULTI_ALPHA\n    o.rgb*=o.a;\n  #endif\n  gl_FragColor =o;\n}"
      }
    }
  ],
  "subMetas": {}
}