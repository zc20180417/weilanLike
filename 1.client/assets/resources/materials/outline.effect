// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        noiseMap: { value: white}
        alphaThreshold: { value: 0.5 }
        offsetX: { value: 0.002}
        offsetY: { value: 0.002}
        waveSpeed: { value: 0.05}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform sampler2D noiseMap;

  uniform FSBlock{
    //偏移幅度
    float offsetX;
    float offsetY;
    float waveSpeed;
    // float time;
  };  

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    //取噪声图的偏移
    vec4 noiseTex = vec4(1, 1, 1, 1);

    CCTexture(noiseMap,cc_time.x*waveSpeed+v_uv0,noiseTex);
    vec2 offset = vec2(noiseTex.r, noiseTex.g);
    offset = (offset-0.5)*2.0;
    offset.x*=offsetX;
    offset.y*=offsetY;
    CCTexture(texture, v_uv0+offset, o);

    o.rgb= v_color.rgb;

    //0-1
    o.a*=0.8+(sin(3.0*cc_time.x)+1.0)*0.5;
    o.a*=v_color.a;
    gl_FragColor =o;
  }
}%
