{
  "ver": "1.0.27",
  "uuid": "7abe6d24-521f-4869-b7b5-6e3a05496b79",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst float d16 = 0.167;\nconst float d23 = 0.667;\nuniform float brightness;\nvoid main () {\n  vec4 color = v_color * texture2D(texture, v_uv0);\n      float r=color.r;\n      float g=color.g;\n      float b=color.b;\n      float maxc=max(max(r,g),b);\n      float minc=min(min(r,g),b);\n      float h, s, q, p;\n      if(maxc==minc){\n          h=0.0;\n          s=0.0;\n      }else{\n          float dif=maxc-minc;\n          if(maxc==r){\n              h=60.0*(g-b)/dif;\n              if(g<b)h=h+360.0;\n          }else if(maxc==g){\n              h=60.0*(b-r)/dif+120.0;\n          }else if(maxc==b){\n              h=60.0*(r-g)/dif+240.0;\n          }\n          if(maxc+minc<1.0){\n              s=dif/(maxc+minc);\n          }else{\n              s=dif/(2.0-maxc-minc);\n          }\n      }\n      float l=(maxc+minc)/2.0;\n      l=min(1.0,l+brightness);\n      if(l<0.5){\n          q=l*(1.0+s);\n      }else{\n          q=l+s-l*s;\n      }\n      p=2.0*l-q;\n      h=h/360.0;\n      float t[3];\n      t[0]=h+1.0/3.0;\n      t[1]=h;\n      t[2]=h-1.0/3.0;\n      for(int i=0;i<3;i++){\n          if(t[i]<0.0)t[i]+=1.0;\n          if(t[i]>1.0)t[i]-=1.0;\n      }\n      float c[3];\n      for(int i=0;i<3;i++){\n          float te = t[i];\n          if(te<d16){\n              c[i]=p+((q-p)*6.0*te);\n          }else if(te<0.5){\n              c[i]=q;\n          }else if(te<d23){\n              c[i]=p+((q-p)*6.0*(d23-te));\n          }else{\n              c[i]=p;\n          }\n      }\n      gl_FragColor = vec4(c[0],c[1],c[2], color.a);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst float d16 = 0.167;\nconst float d23 = 0.667;\nuniform PROPERTIES{\n  float brightness;\n};\nvoid main () {\n  vec4 color = v_color * texture2D(texture, v_uv0);\n      float r=color.r;\n      float g=color.g;\n      float b=color.b;\n      float maxc=max(max(r,g),b);\n      float minc=min(min(r,g),b);\n      float h, s, q, p;\n      if(maxc==minc){\n          h=0.0;\n          s=0.0;\n      }else{\n          float dif=maxc-minc;\n          if(maxc==r){\n              h=60.0*(g-b)/dif;\n              if(g<b)h=h+360.0;\n          }else if(maxc==g){\n              h=60.0*(b-r)/dif+120.0;\n          }else if(maxc==b){\n              h=60.0*(r-g)/dif+240.0;\n          }\n          if(maxc+minc<1.0){\n              s=dif/(maxc+minc);\n          }else{\n              s=dif/(2.0-maxc-minc);\n          }\n      }\n      float l=(maxc+minc)/2.0;\n      l=min(1.0,l+brightness);\n      if(l<0.5){\n          q=l*(1.0+s);\n      }else{\n          q=l+s-l*s;\n      }\n      p=2.0*l-q;\n      h=h/360.0;\n      float t[3];\n      t[0]=h+1.0/3.0;\n      t[1]=h;\n      t[2]=h-1.0/3.0;\n      for(int i=0;i<3;i++){\n          if(t[i]<0.0)t[i]+=1.0;\n          if(t[i]>1.0)t[i]-=1.0;\n      }\n      float c[3];\n      for(int i=0;i<3;i++){\n          float te = t[i];\n          if(te<d16){\n              c[i]=p+((q-p)*6.0*te);\n          }else if(te<0.5){\n              c[i]=q;\n          }else if(te<d23){\n              c[i]=p+((q-p)*6.0*(d23-te));\n          }else{\n              c[i]=p;\n          }\n      }\n      gl_FragColor = vec4(c[0],c[1],c[2], color.a);\n}"
      }
    }
  ],
  "subMetas": {}
}