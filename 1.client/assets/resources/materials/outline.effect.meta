{
  "ver": "1.0.27",
  "uuid": "0fcff550-6501-4e04-9e49-57d8815ed0f4",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D noiseMap;\nuniform float offsetX;\nuniform float offsetY;\nuniform float waveSpeed;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 noiseTex = vec4(1, 1, 1, 1);\n  vec4 noiseMap_tmp = texture2D(noiseMap, cc_time.x*waveSpeed+v_uv0);\n  #if CC_USE_ALPHA_ATLAS_noiseMap\n      noiseMap_tmp.a *= texture2D(noiseMap, cc_time.x*waveSpeed+v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    noiseTex.rgb *= (noiseMap_tmp.rgb * noiseMap_tmp.rgb);\n    noiseTex.a *= noiseMap_tmp.a;\n  #else\n    noiseTex *= noiseMap_tmp;\n  #endif\n  vec2 offset = vec2(noiseTex.r, noiseTex.g);\n  offset = (offset-0.5)*2.0;\n  offset.x*=offsetX;\n  offset.y*=offsetY;\n  vec4 texture_tmp = texture2D(texture, v_uv0+offset);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0+offset + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o.rgb= v_color.rgb;\n  o.a*=0.8+(sin(3.0*cc_time.x)+1.0)*0.5;\n  o.a*=v_color.a;\n  gl_FragColor =o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D noiseMap;\nuniform FSBlock{\n  float offsetX;\n  float offsetY;\n  float waveSpeed;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 noiseTex = vec4(1, 1, 1, 1);\n  vec4 noiseMap_tmp = texture(noiseMap, cc_time.x*waveSpeed+v_uv0);\n  #if CC_USE_ALPHA_ATLAS_noiseMap\n      noiseMap_tmp.a *= texture(noiseMap, cc_time.x*waveSpeed+v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    noiseTex.rgb *= (noiseMap_tmp.rgb * noiseMap_tmp.rgb);\n    noiseTex.a *= noiseMap_tmp.a;\n  #else\n    noiseTex *= noiseMap_tmp;\n  #endif\n  vec2 offset = vec2(noiseTex.r, noiseTex.g);\n  offset = (offset-0.5)*2.0;\n  offset.x*=offsetX;\n  offset.y*=offsetY;\n  vec4 texture_tmp = texture(texture, v_uv0+offset);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0+offset + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o.rgb= v_color.rgb;\n  o.a*=0.8+(sin(3.0*cc_time.x)+1.0)*0.5;\n  o.a*=v_color.a;\n  gl_FragColor =o;\n}"
      }
    }
  ],
  "subMetas": {}
}