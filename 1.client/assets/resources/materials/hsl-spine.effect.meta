{
  "ver": "1.0.27",
  "uuid": "5a90347a-91b7-43a9-860d-d33b8651b093",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n#endif\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 u_color;\nuniform float u_brightness;\nuniform float u_h;\nuniform float u_s;\nuniform float u_l;\n  void hsl2Rgb(in vec3 hsl,out vec3 rgb){\n    float c = (1.0-abs(2.0*hsl.z-1.0))*hsl.y;\n    float x = c*(1.0-abs(mod(hsl.x/60.0,2.0)-1.0));\n    float m = hsl.z-c*0.5;\n    float r=0.0;\n    float g=0.0;\n    float b=0.0;\n    if(hsl.x<60.0){\n      r=c;g=x;\n    }else if(hsl.x<120.0){\n      r=x;g=c;\n    }else if(hsl.x<180.0){\n      g=c;b=x;\n    }else if(hsl.x<240.0){\n      g=x;b=c;\n    }else if(hsl.x<300.0){\n      r=x;b=c;\n    }else if(hsl.x<=360.0){\n      r=c;b=x;\n    }\n    rgb.r=r+m;\n    rgb.g=g+m;\n    rgb.b=b+m;\n  }\n  void rgb2Hsl(in vec3 rgb,out vec3 hsl){\n    float cMax=max(rgb.r,max(rgb.g,rgb.b));\n    float cMin=min(rgb.r,min(rgb.g,rgb.b));\n    float dC=cMax-cMin;\n    hsl.z=(cMax+cMin)*0.5;\n    if(dC==0.0){\n      hsl.x=0.0;\n    }else if(cMax==rgb.r){\n      hsl.x=60.0*mod((rgb.g-rgb.b)/dC,6.0);\n    }else if(cMax==rgb.g){\n      hsl.x=60.0*((rgb.b-rgb.r)/dC+2.0);\n    }else{\n      hsl.x=60.0*((rgb.r-rgb.g)/dC+4.0);\n    }\n    if(dC==0.0){\n      hsl.y=0.0;\n    }else {\n      hsl.y=dC/(1.0-abs(2.0*hsl.z-1.0));\n    }\n  }\nvoid main () {\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    finalColor = texColor * v_light;\n  #endif\n    vec3 hsl=vec3(0,0,0);\n    vec3 rgb=vec3(0,0,0);\n    #if USE_GRAY\n      float gray = 0.2126*finalColor.r + 0.7152*finalColor.g + 0.0722*finalColor.b;\n      finalColor.r=finalColor.g=finalColor.b=gray;\n    #endif\n    if (u_h != 0.0 || u_s != 0.0 || u_l != 0.0) {\n      rgb2Hsl(finalColor.rgb,hsl);\n      hsl.x=mod(u_h+hsl.x+360.0,360.0);\n      hsl.y=clamp(u_s+hsl.y,0.0,1.0);\n      hsl.z=clamp(u_l+hsl.z,0.0,1.0);\n      hsl2Rgb(hsl,rgb);\n      finalColor.rgb=rgb;\n    }\n    finalColor.rgb*=u_color.rgb;\n  finalColor.rgb+=finalColor.a* vec3(u_brightness);\n  ALPHA_TEST(finalColor);\n  gl_FragColor = finalColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\n#if USE_TINT\n  in vec4 a_color0;\n#endif\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_light;\n#if USE_TINT\n  out vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nin vec2 v_uv0;\nin vec4 v_light;\n#if USE_TINT\n  in vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform FS_BLOCK{\n    vec4 u_color;\n    float u_brightness;\n    float u_h;\n    float u_s;\n    float u_l;\n};\n  void hsl2Rgb(in vec3 hsl,out vec3 rgb){\n    float c = (1.0-abs(2.0*hsl.z-1.0))*hsl.y;\n    float x = c*(1.0-abs(mod(hsl.x/60.0,2.0)-1.0));\n    float m = hsl.z-c*0.5;\n    float r=0.0;\n    float g=0.0;\n    float b=0.0;\n    if(hsl.x<60.0){\n      r=c;g=x;\n    }else if(hsl.x<120.0){\n      r=x;g=c;\n    }else if(hsl.x<180.0){\n      g=c;b=x;\n    }else if(hsl.x<240.0){\n      g=x;b=c;\n    }else if(hsl.x<300.0){\n      r=x;b=c;\n    }else if(hsl.x<=360.0){\n      r=c;b=x;\n    }\n    rgb.r=r+m;\n    rgb.g=g+m;\n    rgb.b=b+m;\n  }\n  void rgb2Hsl(in vec3 rgb,out vec3 hsl){\n    float cMax=max(rgb.r,max(rgb.g,rgb.b));\n    float cMin=min(rgb.r,min(rgb.g,rgb.b));\n    float dC=cMax-cMin;\n    hsl.z=(cMax+cMin)*0.5;\n    if(dC==0.0){\n      hsl.x=0.0;\n    }else if(cMax==rgb.r){\n      hsl.x=60.0*mod((rgb.g-rgb.b)/dC,6.0);\n    }else if(cMax==rgb.g){\n      hsl.x=60.0*((rgb.b-rgb.r)/dC+2.0);\n    }else{\n      hsl.x=60.0*((rgb.r-rgb.g)/dC+4.0);\n    }\n    if(dC==0.0){\n      hsl.y=0.0;\n    }else {\n      hsl.y=dC/(1.0-abs(2.0*hsl.z-1.0));\n    }\n  }\nvoid main () {\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    finalColor = texColor * v_light;\n  #endif\n    vec3 hsl=vec3(0,0,0);\n    vec3 rgb=vec3(0,0,0);\n    #if USE_GRAY\n      float gray = 0.2126*finalColor.r + 0.7152*finalColor.g + 0.0722*finalColor.b;\n      finalColor.r=finalColor.g=finalColor.b=gray;\n    #endif\n    if (u_h != 0.0 || u_s != 0.0 || u_l != 0.0) {\n      rgb2Hsl(finalColor.rgb,hsl);\n      hsl.x=mod(u_h+hsl.x+360.0,360.0);\n      hsl.y=clamp(u_s+hsl.y,0.0,1.0);\n      hsl.z=clamp(u_l+hsl.z,0.0,1.0);\n      hsl2Rgb(hsl,rgb);\n      finalColor.rgb=rgb;\n    }\n    finalColor.rgb*=u_color.rgb;\n  finalColor.rgb+=finalColor.a* vec3(u_brightness);\n  ALPHA_TEST(finalColor);\n  gl_FragColor = finalColor;\n}"
      }
    }
  ],
  "subMetas": {}
}